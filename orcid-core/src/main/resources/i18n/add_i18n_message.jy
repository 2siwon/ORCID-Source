#!/usr/bin/env jython
# Author: Will Simpson
# A script to add a property to a bunch of i18n properties file, and flag in the comments that needs translation
# Unfortunately doesn't work with the email properties, because of the extra comment in those files
# Assumes you have ORCID-Source checked out in ~/git
# Developed using Jython 2.5.3 and Java 1.7.0_45
# For more info run
# ./add_i18n_message.jy --help

import codecs
import glob
import logging
import optparse
import os
import re
import sys
from java.io import FileInputStream
from java.io import FileOutputStream
from java.io import InputStreamReader
from java.io import OutputStreamWriter
from java.util import Collections
from java.util import Properties
from __builtin__ import None

# Init

logging.basicConfig(format='%(asctime)s:%(levelname)s:%(message)s', level=logging.INFO)
info = logging.info

# Config

resource_dir = os.path.dirname(os.path.realpath(sys.argv[0]))
en_suffix = '_en.properties'

# Function definitions

class SortedProperties(Properties):
    def keys(self):
        return Collections.enumeration(sorted(self.super__keys()))

def load_props(properties_filename):
    path = os.path.join(resource_dir, properties_filename)
    fis = FileInputStream(path)
    isr = InputStreamReader(fis, 'UTF-8')
    props = SortedProperties()
    props.load(isr)
    fis.close()
    return props

def store_props(props, comment_lines, properties_filename):
    path = os.path.join(resource_dir, properties_filename)
    comment_string = str.join('', comment_lines)
    fos = FileOutputStream(path)
    osw = OutputStreamWriter(fos, 'UTF-8')
    props.store(osw, comment_string)
    fos.close();
    tidy_license_header(path)

def read_comment_lines(properties_filename):
    path = os.path.join(resource_dir, properties_filename)
    fis = FileInputStream(path)
    file = codecs.open(path, 'r', 'UTF-8')
    lines = file.readlines()
    file.close()
    comment_lines = [l for l in lines if l.startswith('#')]
    # Need to remove initial # character as will be re-added automatically when storing the props
    comment_lines[0] = re.sub('^#', '', comment_lines[0])
    # Need to snip off any comments automatically added by properties storing
    indices_to_delete = []
    for i in [-1, -2]:
        # Make sure not a key
        trailing_line = comment_lines[i]
        if(not(key_match(trailing_line))):
            indices_to_delete.append(i);
    comment_lines_length = len(comment_lines);
    for i in indices_to_delete:
        comment_lines.pop(comment_lines_length + i)
    return comment_lines

def add_comment(comment_lines, key):
    new_comment="# " + key + "\n"
    if (not(any(new_comment == l for l in comment_lines))):
        comment_lines.append(new_comment)

def tidy_license_header(path):
    file = codecs.open(path, 'r', 'UTF-8')
    lines = file.readlines()
    file.close
    # Need to insert a blank line after the license, otherwise messes up the license check
    rule_count = 0
    for index, line in enumerate(lines):
        if line.startswith('# ====='):
            rule_count += 1
            if (rule_count == 2):
                lines.insert(index + 2, "\n")
                break
    file = codecs.open(path, 'w', 'UTF-8')
    file.write(str.join('', lines))
    file.close
    
def key_match(possible_match):
    return re.match('#\s*([\w._]+)\s*$', possible_match)

def check_for_missing(en_props, props, comment_lines):
    for en_prop in en_props:
        prop = props[en_prop]
        if (prop == None):
            info('Missing property: ' + en_prop)
            add_comment(comment_lines, en_prop)
            props.put(en_prop, en_props[en_prop])

def check_for_extra(en_props, props, comment_lines):
    props_to_remove = []
    for prop in props:
        en_prop = en_props[prop]
        if (en_prop == None):
            info('Extra property: ' + prop)
            props_to_remove.append(prop)
    
    for prop_to_remove in props_to_remove:
        props.remove(prop_to_remove) # Check comments for non existent properties flagged for translation
    
    indices_to_delete = []
    for index, comment_line in enumerate(comment_lines): # If looks like a key
        match = key_match(comment_line)
        if (match):
            comment_key = match.group(1)
            prop = props[comment_key]
            if (prop == None):
                info("Found a non-existent key in comments: " + comment_key)
                indices_to_delete.append(index)
    
    comment_lines = [comment_line for index, comment_line in enumerate(comment_lines) if index not in indices_to_delete]
    return comment_lines

# Start of script

parser = optparse.OptionParser(option_list=[
    optparse.Option('-k', '--key', help='the key of the property'),
    optparse.Option('-v', '--value', help='the value of the property'),
    optparse.Option('-p', '--prefix', help='the prefix of the properties files (messages|javascript)', choices=('messages', 'javascript')),
    optparse.Option('-s', '--sync', help='synchronize non-English properties, based on the English properties', action='store_true'),
    optparse.Option('-r', '--retranslate', help='read list of keys from stdin to flag for re-translation', action='store_true'),
])
(options, args) = parser.parse_args()
# Validate args
if(options.prefix is None):
    parser.error("-p must be defined")
if(not(options.sync) and not(options.retranslate) and (options.key == None or options.value == None)):
    parser.error("-s or -r or -k and -v must be defined")

dir_listing = os.listdir(resource_dir)
properties_filenames = [f for f in dir_listing if f.startswith(options.prefix + '_')]
en_filename = options.prefix + en_suffix

if(options.sync):
    info('Synchronizing with English')
    en_props = load_props(en_filename)
    for properties_filename in properties_filenames:
        if(properties_filename == en_filename):
            continue
        info('Synchronizing properties file: ' + properties_filename)
        props = load_props(properties_filename)
        comment_lines = read_comment_lines(properties_filename)
        # Check for missing properties
        check_for_missing(en_props, props, comment_lines)
        # Check for extra properties
        comment_lines = check_for_extra(en_props, props, comment_lines)
        store_props(props, comment_lines, properties_filename)
    # Resave the English properties to ensure alpha sorted
    en_comment_lines = read_comment_lines(en_filename)
    store_props(en_props, en_comment_lines, en_filename)
    
if(options.retranslate):
    info("Flagging for re-translation")
    keys_for_retranslation = []
    while True:
        try:
            line = raw_input()
            keys_for_retranslation.append(line.strip())
        except EOFError:
            break
    for properties_filename in properties_filenames:
        if(properties_filename == en_filename):
            continue
        info('Flagging re-translations in properties file: ' + properties_filename)
        props = load_props(properties_filename)
        comment_lines = read_comment_lines(properties_filename)
        for key_for_retranslation in keys_for_retranslation:
            prop = props[key_for_retranslation]
            if(prop == None):
                info("No such property for re-translation: " + key_for_retranslation)
            else:
                add_comment(comment_lines, key_for_retranslation)
        store_props(props, comment_lines, properties_filename)
    
if(options.key):
    # Just add a new key/value
    for properties_filename in properties_filenames:
        props = load_props(properties_filename)
        comment_lines = read_comment_lines(properties_filename)
        if(properties_filename != en_filename):
            add_comment(comment_lines, options.key)
        props.put(options.key, options.value)
        store_props(props, comment_lines, properties_filename)
